// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHEAT_PACKETTABLE_CHEATTABLE_H_
#define FLATBUFFERS_GENERATED_CHEAT_PACKETTABLE_CHEATTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Utilities_generated.h"

namespace PacketTable {
namespace CheatTable {

struct AccountReset;
struct AccountResetBuilder;

struct GetCurrency;
struct GetCurrencyBuilder;

struct AccountReset FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountResetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  int32_t uid() const {
    return GetField<int32_t>(VT_UID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UID, 4) &&
           verifier.EndTable();
  }
};

struct AccountResetBuilder {
  typedef AccountReset Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uid(int32_t uid) {
    fbb_.AddElement<int32_t>(AccountReset::VT_UID, uid, 0);
  }
  explicit AccountResetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountReset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountReset>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountReset> CreateAccountReset(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uid = 0) {
  AccountResetBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct GetCurrency FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetCurrencyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM_CODE = 4,
    VT_COUNT = 6
  };
  int32_t item_code() const {
    return GetField<int32_t>(VT_ITEM_CODE, 0);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ITEM_CODE, 4) &&
           VerifyField<int32_t>(verifier, VT_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct GetCurrencyBuilder {
  typedef GetCurrency Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_item_code(int32_t item_code) {
    fbb_.AddElement<int32_t>(GetCurrency::VT_ITEM_CODE, item_code, 0);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(GetCurrency::VT_COUNT, count, 0);
  }
  explicit GetCurrencyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetCurrency> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetCurrency>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetCurrency> CreateGetCurrency(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t item_code = 0,
    int32_t count = 0) {
  GetCurrencyBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_item_code(item_code);
  return builder_.Finish();
}

}  // namespace CheatTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_CHEAT_PACKETTABLE_CHEATTABLE_H_
