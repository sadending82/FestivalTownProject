// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.LobbyTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameMatchingRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GameMatchingRequest GetRootAsGameMatchingRequest(ByteBuffer _bb) { return GetRootAsGameMatchingRequest(_bb, new GameMatchingRequest()); }
  public static GameMatchingRequest GetRootAsGameMatchingRequest(ByteBuffer _bb, GameMatchingRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameMatchingRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MatchingType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapCode { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.LobbyTable.GameMatchingRequest> CreateGameMatchingRequest(FlatBufferBuilder builder,
      int id = 0,
      int matching_type = 0,
      int map_code = 0) {
    builder.StartTable(3);
    GameMatchingRequest.AddMapCode(builder, map_code);
    GameMatchingRequest.AddMatchingType(builder, matching_type);
    GameMatchingRequest.AddId(builder, id);
    return GameMatchingRequest.EndGameMatchingRequest(builder);
  }

  public static void StartGameMatchingRequest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddMatchingType(FlatBufferBuilder builder, int matchingType) { builder.AddInt(1, matchingType, 0); }
  public static void AddMapCode(FlatBufferBuilder builder, int mapCode) { builder.AddInt(2, mapCode, 0); }
  public static Offset<PacketTable.LobbyTable.GameMatchingRequest> EndGameMatchingRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.LobbyTable.GameMatchingRequest>(o);
  }
}


static public class GameMatchingRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MatchingType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MapCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
