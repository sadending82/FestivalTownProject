// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.UtilitiesTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerGameRecord : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PlayerGameRecord GetRootAsPlayerGameRecord(ByteBuffer _bb) { return GetRootAsPlayerGameRecord(_bb, new PlayerGameRecord()); }
  public static PlayerGameRecord GetRootAsPlayerGameRecord(ByteBuffer _bb, PlayerGameRecord obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerGameRecord __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Team { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KillCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DeathCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BombInsertCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EarnGold { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Point { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsMvp { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<PacketTable.UtilitiesTable.PlayerGameRecord> CreatePlayerGameRecord(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      int team = 0,
      int kill_count = 0,
      int death_count = 0,
      int bomb_insert_count = 0,
      int earn_gold = 0,
      int point = 0,
      bool is_mvp = false) {
    builder.StartTable(9);
    PlayerGameRecord.AddPoint(builder, point);
    PlayerGameRecord.AddEarnGold(builder, earn_gold);
    PlayerGameRecord.AddBombInsertCount(builder, bomb_insert_count);
    PlayerGameRecord.AddDeathCount(builder, death_count);
    PlayerGameRecord.AddKillCount(builder, kill_count);
    PlayerGameRecord.AddTeam(builder, team);
    PlayerGameRecord.AddName(builder, nameOffset);
    PlayerGameRecord.AddId(builder, id);
    PlayerGameRecord.AddIsMvp(builder, is_mvp);
    return PlayerGameRecord.EndPlayerGameRecord(builder);
  }

  public static void StartPlayerGameRecord(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddTeam(FlatBufferBuilder builder, int team) { builder.AddInt(2, team, 0); }
  public static void AddKillCount(FlatBufferBuilder builder, int killCount) { builder.AddInt(3, killCount, 0); }
  public static void AddDeathCount(FlatBufferBuilder builder, int deathCount) { builder.AddInt(4, deathCount, 0); }
  public static void AddBombInsertCount(FlatBufferBuilder builder, int bombInsertCount) { builder.AddInt(5, bombInsertCount, 0); }
  public static void AddEarnGold(FlatBufferBuilder builder, int earnGold) { builder.AddInt(6, earnGold, 0); }
  public static void AddPoint(FlatBufferBuilder builder, int point) { builder.AddInt(7, point, 0); }
  public static void AddIsMvp(FlatBufferBuilder builder, bool isMvp) { builder.AddBool(8, isMvp, false); }
  public static Offset<PacketTable.UtilitiesTable.PlayerGameRecord> EndPlayerGameRecord(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.UtilitiesTable.PlayerGameRecord>(o);
  }
}


static public class PlayerGameRecordVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Team*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*KillCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DeathCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*BombInsertCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*EarnGold*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Point*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*IsMvp*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
