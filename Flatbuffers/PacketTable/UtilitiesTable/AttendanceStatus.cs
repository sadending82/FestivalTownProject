// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.UtilitiesTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AttendanceStatus : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AttendanceStatus GetRootAsAttendanceStatus(ByteBuffer _bb) { return GetRootAsAttendanceStatus(_bb, new AttendanceStatus()); }
  public static AttendanceStatus GetRootAsAttendanceStatus(ByteBuffer _bb, AttendanceStatus obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttendanceStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EventCode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool HasAttendanceToday { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public PacketTable.UtilitiesTable.DayAttendanceInfo? DaysInfo(int j) { int o = __p.__offset(8); return o != 0 ? (PacketTable.UtilitiesTable.DayAttendanceInfo?)(new PacketTable.UtilitiesTable.DayAttendanceInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DaysInfoLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PacketTable.UtilitiesTable.AttendanceStatus> CreateAttendanceStatus(FlatBufferBuilder builder,
      int event_code = 0,
      bool has_attendance_today = false,
      VectorOffset days_infoOffset = default(VectorOffset)) {
    builder.StartTable(3);
    AttendanceStatus.AddDaysInfo(builder, days_infoOffset);
    AttendanceStatus.AddEventCode(builder, event_code);
    AttendanceStatus.AddHasAttendanceToday(builder, has_attendance_today);
    return AttendanceStatus.EndAttendanceStatus(builder);
  }

  public static void StartAttendanceStatus(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEventCode(FlatBufferBuilder builder, int eventCode) { builder.AddInt(0, eventCode, 0); }
  public static void AddHasAttendanceToday(FlatBufferBuilder builder, bool hasAttendanceToday) { builder.AddBool(1, hasAttendanceToday, false); }
  public static void AddDaysInfo(FlatBufferBuilder builder, VectorOffset daysInfoOffset) { builder.AddOffset(2, daysInfoOffset.Value, 0); }
  public static VectorOffset CreateDaysInfoVector(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.DayAttendanceInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDaysInfoVectorBlock(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.DayAttendanceInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDaysInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PacketTable.UtilitiesTable.DayAttendanceInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDaysInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PacketTable.UtilitiesTable.DayAttendanceInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDaysInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PacketTable.UtilitiesTable.AttendanceStatus> EndAttendanceStatus(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.UtilitiesTable.AttendanceStatus>(o);
  }
}


static public class AttendanceStatusVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*HasAttendanceToday*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*DaysInfo*/, PacketTable.UtilitiesTable.DayAttendanceInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
