// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.UtilitiesTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Date : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Date GetRootAsDate(ByteBuffer _bb) { return GetRootAsDate(_bb, new Date()); }
  public static Date GetRootAsDate(ByteBuffer _bb, Date obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Date __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Year { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Month { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Day { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.UtilitiesTable.Date> CreateDate(FlatBufferBuilder builder,
      int year = 0,
      int month = 0,
      int day = 0) {
    builder.StartTable(3);
    Date.AddDay(builder, day);
    Date.AddMonth(builder, month);
    Date.AddYear(builder, year);
    return Date.EndDate(builder);
  }

  public static void StartDate(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddYear(FlatBufferBuilder builder, int year) { builder.AddInt(0, year, 0); }
  public static void AddMonth(FlatBufferBuilder builder, int month) { builder.AddInt(1, month, 0); }
  public static void AddDay(FlatBufferBuilder builder, int day) { builder.AddInt(2, day, 0); }
  public static Offset<PacketTable.UtilitiesTable.Date> EndDate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.UtilitiesTable.Date>(o);
  }
}


static public class DateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Year*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Month*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Day*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
