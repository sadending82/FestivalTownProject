// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.ObjectTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlockDrop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static BlockDrop GetRootAsBlockDrop(ByteBuffer _bb) { return GetRootAsBlockDrop(_bb, new BlockDrop()); }
  public static BlockDrop GetRootAsBlockDrop(ByteBuffer _bb, BlockDrop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlockDrop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PacketTable.UtilitiesTable.Vec2i? Pos(int j) { int o = __p.__offset(4); return o != 0 ? (PacketTable.UtilitiesTable.Vec2i?)(new PacketTable.UtilitiesTable.Vec2i()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PosLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Type(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTypeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetTypeArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<PacketTable.ObjectTable.BlockDrop> CreateBlockDrop(FlatBufferBuilder builder,
      VectorOffset posOffset = default(VectorOffset),
      VectorOffset typeOffset = default(VectorOffset)) {
    builder.StartTable(2);
    BlockDrop.AddType(builder, typeOffset);
    BlockDrop.AddPos(builder, posOffset);
    return BlockDrop.EndBlockDrop(builder);
  }

  public static void StartBlockDrop(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPos(FlatBufferBuilder builder, VectorOffset posOffset) { builder.AddOffset(0, posOffset.Value, 0); }
  public static VectorOffset CreatePosVector(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.Vec2i>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.Vec2i>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PacketTable.UtilitiesTable.Vec2i>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PacketTable.UtilitiesTable.Vec2i>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, VectorOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static VectorOffset CreateTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTypeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PacketTable.ObjectTable.BlockDrop> EndBlockDrop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.ObjectTable.BlockDrop>(o);
  }
}


static public class BlockDropVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Pos*/, PacketTable.UtilitiesTable.Vec2iVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Type*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
