// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAME_PACKETTABLE_GAMETABLE_H_
#define FLATBUFFERS_GENERATED_GAME_PACKETTABLE_GAMETABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace GameTable {

struct Game;
struct GameBuilder;

struct BombInput;
struct BombInputBuilder;

struct LifeReduce;
struct LifeReduceBuilder;

struct GameEnd;
struct GameEndBuilder;

struct Game FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GameBuilder {
  typedef Game Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit GameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Game> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Game>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Game> CreateGame(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  GameBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BombInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BombInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TEAM = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           verifier.EndTable();
  }
};

struct BombInputBuilder {
  typedef BombInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(BombInput::VT_ID, id, 0);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(BombInput::VT_TEAM, team, 0);
  }
  explicit BombInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BombInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BombInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BombInput> CreateBombInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t team = 0) {
  BombInputBuilder builder_(_fbb);
  builder_.add_team(team);
  builder_.add_id(id);
  return builder_.Finish();
}

struct LifeReduce FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LifeReduceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEAM = 4,
    VT_LIFE = 6
  };
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  int32_t life() const {
    return GetField<int32_t>(VT_LIFE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           VerifyField<int32_t>(verifier, VT_LIFE, 4) &&
           verifier.EndTable();
  }
};

struct LifeReduceBuilder {
  typedef LifeReduce Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(LifeReduce::VT_TEAM, team, 0);
  }
  void add_life(int32_t life) {
    fbb_.AddElement<int32_t>(LifeReduce::VT_LIFE, life, 0);
  }
  explicit LifeReduceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LifeReduce> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LifeReduce>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LifeReduce> CreateLifeReduce(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t team = 0,
    int32_t life = 0) {
  LifeReduceBuilder builder_(_fbb);
  builder_.add_life(life);
  builder_.add_team(team);
  return builder_.Finish();
}

struct GameEnd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameEndBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WINNINGTEAM = 4
  };
  int32_t winningteam() const {
    return GetField<int32_t>(VT_WINNINGTEAM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WINNINGTEAM, 4) &&
           verifier.EndTable();
  }
};

struct GameEndBuilder {
  typedef GameEnd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_winningteam(int32_t winningteam) {
    fbb_.AddElement<int32_t>(GameEnd::VT_WINNINGTEAM, winningteam, 0);
  }
  explicit GameEndBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameEnd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameEnd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameEnd> CreateGameEnd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t winningteam = 0) {
  GameEndBuilder builder_(_fbb);
  builder_.add_winningteam(winningteam);
  return builder_.Finish();
}

inline const PacketTable::GameTable::Game *GetGame(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::GameTable::Game>(buf);
}

inline const PacketTable::GameTable::Game *GetSizePrefixedGame(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::GameTable::Game>(buf);
}

inline bool VerifyGameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::GameTable::Game>(nullptr);
}

inline bool VerifySizePrefixedGameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::GameTable::Game>(nullptr);
}

inline void FinishGameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::GameTable::Game> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::GameTable::Game> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GameTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_GAME_PACKETTABLE_GAMETABLE_H_
