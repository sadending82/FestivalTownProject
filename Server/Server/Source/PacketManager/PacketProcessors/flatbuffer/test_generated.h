// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct test;
struct testBuilder;

struct test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef testBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAT = 4,
    VT_NUMBER = 6
  };
  const ::flatbuffers::String *chat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHAT);
  }
  int32_t number() const {
    return GetField<int32_t>(VT_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHAT) &&
           verifier.VerifyString(chat()) &&
           VerifyField<int32_t>(verifier, VT_NUMBER, 4) &&
           verifier.EndTable();
  }
};

struct testBuilder {
  typedef test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_chat(::flatbuffers::Offset<::flatbuffers::String> chat) {
    fbb_.AddOffset(test::VT_CHAT, chat);
  }
  void add_number(int32_t number) {
    fbb_.AddElement<int32_t>(test::VT_NUMBER, number, 0);
  }
  explicit testBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<test> Createtest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> chat = 0,
    int32_t number = 0) {
  testBuilder builder_(_fbb);
  builder_.add_number(number);
  builder_.add_chat(chat);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<test> CreatetestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *chat = nullptr,
    int32_t number = 0) {
  auto chat__ = chat ? _fbb.CreateString(chat) : 0;
  return Createtest(
      _fbb,
      chat__,
      number);
}

inline const test *Gettest(const void *buf) {
  return ::flatbuffers::GetRoot<test>(buf);
}

inline const test *GetSizePrefixedtest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<test>(buf);
}

inline bool VerifytestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test>(nullptr);
}

inline bool VerifySizePrefixedtestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<test>(nullptr);
}

inline void FinishtestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<test> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<test> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TEST_H_
