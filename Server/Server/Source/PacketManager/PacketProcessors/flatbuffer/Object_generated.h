// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBJECT_PACKETTABLE_OBJECTTABLE_H_
#define FLATBUFFERS_GENERATED_OBJECT_PACKETTABLE_OBJECTTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace ObjectTable {

struct Object;
struct ObjectBuilder;

struct ObjectDrop;
struct ObjectDropBuilder;

struct BombSpawn;
struct BombSpawnBuilder;

struct Vec2;
struct Vec2Builder;

struct Vec3;
struct Vec3Builder;

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_ID = 6
  };
  const PacketTable::ObjectTable::Vec3 *pos() const {
    return GetPointer<const PacketTable::ObjectTable::Vec3 *>(VT_POS);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(::flatbuffers::Offset<PacketTable::ObjectTable::Vec3> pos) {
    fbb_.AddOffset(Object::VT_POS, pos);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Object::VT_ID, id, 0);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PacketTable::ObjectTable::Vec3> pos = 0,
    int32_t id = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct ObjectDrop FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectDropBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_ID = 6
  };
  const PacketTable::ObjectTable::Vec2 *pos() const {
    return GetPointer<const PacketTable::ObjectTable::Vec2 *>(VT_POS);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct ObjectDropBuilder {
  typedef ObjectDrop Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(::flatbuffers::Offset<PacketTable::ObjectTable::Vec2> pos) {
    fbb_.AddOffset(ObjectDrop::VT_POS, pos);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(ObjectDrop::VT_ID, id, 0);
  }
  explicit ObjectDropBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectDrop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectDrop>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectDrop> CreateObjectDrop(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PacketTable::ObjectTable::Vec2> pos = 0,
    int32_t id = 0) {
  ObjectDropBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct BombSpawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BombSpawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4
  };
  const PacketTable::ObjectTable::Vec2 *pos() const {
    return GetPointer<const PacketTable::ObjectTable::Vec2 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           verifier.EndTable();
  }
};

struct BombSpawnBuilder {
  typedef BombSpawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(::flatbuffers::Offset<PacketTable::ObjectTable::Vec2> pos) {
    fbb_.AddOffset(BombSpawn::VT_POS, pos);
  }
  explicit BombSpawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BombSpawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BombSpawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BombSpawn> CreateBombSpawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PacketTable::ObjectTable::Vec2> pos = 0) {
  BombSpawnBuilder builder_(_fbb);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct Vec2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vec2Builder {
  typedef Vec2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Vec2::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Vec2::VT_Y, y, 0);
  }
  explicit Vec2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec2> CreateVec2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0) {
  Vec2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Vec3 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vec3Builder {
  typedef Vec3 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Vec3::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Vec3::VT_Y, y, 0);
  }
  explicit Vec3Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec3>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec3> CreateVec3(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0) {
  Vec3Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const PacketTable::ObjectTable::Object *GetObject(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::ObjectTable::Object>(buf);
}

inline const PacketTable::ObjectTable::Object *GetSizePrefixedObject(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::ObjectTable::Object>(buf);
}

inline bool VerifyObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::ObjectTable::Object>(nullptr);
}

inline bool VerifySizePrefixedObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::ObjectTable::Object>(nullptr);
}

inline void FinishObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::ObjectTable::Object> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::ObjectTable::Object> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ObjectTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_OBJECT_PACKETTABLE_OBJECTTABLE_H_
