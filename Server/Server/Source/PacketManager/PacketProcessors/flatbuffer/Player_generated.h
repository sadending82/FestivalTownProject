// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_PACKETTABLE_PLAYER_H_
#define FLATBUFFERS_GENERATED_PLAYER_PACKETTABLE_PLAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace Player {

struct Player;
struct PlayerBuilder;

struct PlayerAdd;
struct PlayerAddBuilder;

struct PlayerMove;
struct PlayerMoveBuilder;

struct PlayerStop;
struct PlayerStopBuilder;

struct Vec3;
struct Vec3Builder;

struct Player FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_DIRECTION = 6
  };
  const PacketTable::Player::Vec3 *pos() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_POS);
  }
  const PacketTable::Player::Vec3 *direction() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  typedef Player Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(::flatbuffers::Offset<PacketTable::Player::Vec3> pos) {
    fbb_.AddOffset(Player::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::Player::Vec3> direction) {
    fbb_.AddOffset(Player::VT_DIRECTION, direction);
  }
  explicit PlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Player> CreatePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> pos = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> direction = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct PlayerAdd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerAddBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_POS = 6,
    VT_DIRECTION = 8
  };
  int32_t key() const {
    return GetField<int32_t>(VT_KEY, 0);
  }
  const PacketTable::Player::Vec3 *pos() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_POS);
  }
  const PacketTable::Player::Vec3 *direction() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KEY, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           verifier.EndTable();
  }
};

struct PlayerAddBuilder {
  typedef PlayerAdd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(int32_t key) {
    fbb_.AddElement<int32_t>(PlayerAdd::VT_KEY, key, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::Player::Vec3> pos) {
    fbb_.AddOffset(PlayerAdd::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::Player::Vec3> direction) {
    fbb_.AddOffset(PlayerAdd::VT_DIRECTION, direction);
  }
  explicit PlayerAddBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerAdd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerAdd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerAdd> CreatePlayerAdd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t key = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> pos = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> direction = 0) {
  PlayerAddBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct PlayerMove FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_POS = 6,
    VT_DIRECTION = 8
  };
  int32_t key() const {
    return GetField<int32_t>(VT_KEY, 0);
  }
  const PacketTable::Player::Vec3 *pos() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_POS);
  }
  const PacketTable::Player::Vec3 *direction() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KEY, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           verifier.EndTable();
  }
};

struct PlayerMoveBuilder {
  typedef PlayerMove Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(int32_t key) {
    fbb_.AddElement<int32_t>(PlayerMove::VT_KEY, key, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::Player::Vec3> pos) {
    fbb_.AddOffset(PlayerMove::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::Player::Vec3> direction) {
    fbb_.AddOffset(PlayerMove::VT_DIRECTION, direction);
  }
  explicit PlayerMoveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerMove>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerMove> CreatePlayerMove(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t key = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> pos = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> direction = 0) {
  PlayerMoveBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct PlayerStop FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerStopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_POS = 6,
    VT_DIRECTION = 8
  };
  int32_t key() const {
    return GetField<int32_t>(VT_KEY, 0);
  }
  const PacketTable::Player::Vec3 *pos() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_POS);
  }
  const PacketTable::Player::Vec3 *direction() const {
    return GetPointer<const PacketTable::Player::Vec3 *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KEY, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           verifier.EndTable();
  }
};

struct PlayerStopBuilder {
  typedef PlayerStop Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(int32_t key) {
    fbb_.AddElement<int32_t>(PlayerStop::VT_KEY, key, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::Player::Vec3> pos) {
    fbb_.AddOffset(PlayerStop::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::Player::Vec3> direction) {
    fbb_.AddOffset(PlayerStop::VT_DIRECTION, direction);
  }
  explicit PlayerStopBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerStop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerStop>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerStop> CreatePlayerStop(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t key = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> pos = 0,
    ::flatbuffers::Offset<PacketTable::Player::Vec3> direction = 0) {
  PlayerStopBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_key(key);
  return builder_.Finish();
}

struct Vec3 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct Vec3Builder {
  typedef Vec3 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vec3::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vec3::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Vec3::VT_Z, z, 0.0f);
  }
  explicit Vec3Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec3>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec3> CreateVec3(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  Vec3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const PacketTable::Player::Player *GetPlayer(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::Player::Player>(buf);
}

inline const PacketTable::Player::Player *GetSizePrefixedPlayer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::Player::Player>(buf);
}

inline bool VerifyPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::Player::Player>(nullptr);
}

inline bool VerifySizePrefixedPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::Player::Player>(nullptr);
}

inline void FinishPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::Player::Player> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::Player::Player> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Player
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_PLAYER_PACKETTABLE_PLAYER_H_
