// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILITY_PACKETTABLE_UTILITYTABLE_H_
#define FLATBUFFERS_GENERATED_UTILITY_PACKETTABLE_UTILITYTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace UtilityTable {

struct HeartBeat;
struct HeartBeatBuilder;

struct HeartBeat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeartBeatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  int64_t time() const {
    return GetField<int64_t>(VT_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIME, 8) &&
           verifier.EndTable();
  }
};

struct HeartBeatBuilder {
  typedef HeartBeat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_time(int64_t time) {
    fbb_.AddElement<int64_t>(HeartBeat::VT_TIME, time, 0);
  }
  explicit HeartBeatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HeartBeat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HeartBeat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HeartBeat> CreateHeartBeat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t time = 0) {
  HeartBeatBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

}  // namespace UtilityTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_UTILITY_PACKETTABLE_UTILITYTABLE_H_
