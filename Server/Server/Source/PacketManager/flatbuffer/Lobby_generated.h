// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOBBY_PACKETTABLE_LOBBYTABLE_H_
#define FLATBUFFERS_GENERATED_LOBBY_PACKETTABLE_LOBBYTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace LobbyTable {

struct GameMatchingRequest;
struct GameMatchingRequestBuilder;

struct GameMatchingResponse;
struct GameMatchingResponseBuilder;

struct GameMatchingCancel;
struct GameMatchingCancelBuilder;

struct GachaRequest;
struct GachaRequestBuilder;

struct GachaResponse;
struct GachaResponseBuilder;

struct GameMatchingRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameMatchingRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct GameMatchingRequestBuilder {
  typedef GameMatchingRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(GameMatchingRequest::VT_ID, id, 0);
  }
  explicit GameMatchingRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameMatchingRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameMatchingRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameMatchingRequest> CreateGameMatchingRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  GameMatchingRequestBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct GameMatchingResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameMatchingResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INGAMEID = 4,
    VT_ROOMID = 6,
    VT_TEAM = 8,
    VT_GAMEMODE = 10,
    VT_GAME_TIME = 12,
    VT_IS_HOST = 14,
    VT_TOTAL_PLAYER_COUNT = 16
  };
  int32_t ingameid() const {
    return GetField<int32_t>(VT_INGAMEID, 0);
  }
  int32_t roomid() const {
    return GetField<int32_t>(VT_ROOMID, 0);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  int32_t gamemode() const {
    return GetField<int32_t>(VT_GAMEMODE, 0);
  }
  int32_t game_time() const {
    return GetField<int32_t>(VT_GAME_TIME, 0);
  }
  bool is_host() const {
    return GetField<uint8_t>(VT_IS_HOST, 0) != 0;
  }
  int32_t total_player_count() const {
    return GetField<int32_t>(VT_TOTAL_PLAYER_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INGAMEID, 4) &&
           VerifyField<int32_t>(verifier, VT_ROOMID, 4) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           VerifyField<int32_t>(verifier, VT_GAMEMODE, 4) &&
           VerifyField<int32_t>(verifier, VT_GAME_TIME, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_HOST, 1) &&
           VerifyField<int32_t>(verifier, VT_TOTAL_PLAYER_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct GameMatchingResponseBuilder {
  typedef GameMatchingResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ingameid(int32_t ingameid) {
    fbb_.AddElement<int32_t>(GameMatchingResponse::VT_INGAMEID, ingameid, 0);
  }
  void add_roomid(int32_t roomid) {
    fbb_.AddElement<int32_t>(GameMatchingResponse::VT_ROOMID, roomid, 0);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(GameMatchingResponse::VT_TEAM, team, 0);
  }
  void add_gamemode(int32_t gamemode) {
    fbb_.AddElement<int32_t>(GameMatchingResponse::VT_GAMEMODE, gamemode, 0);
  }
  void add_game_time(int32_t game_time) {
    fbb_.AddElement<int32_t>(GameMatchingResponse::VT_GAME_TIME, game_time, 0);
  }
  void add_is_host(bool is_host) {
    fbb_.AddElement<uint8_t>(GameMatchingResponse::VT_IS_HOST, static_cast<uint8_t>(is_host), 0);
  }
  void add_total_player_count(int32_t total_player_count) {
    fbb_.AddElement<int32_t>(GameMatchingResponse::VT_TOTAL_PLAYER_COUNT, total_player_count, 0);
  }
  explicit GameMatchingResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameMatchingResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameMatchingResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameMatchingResponse> CreateGameMatchingResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t ingameid = 0,
    int32_t roomid = 0,
    int32_t team = 0,
    int32_t gamemode = 0,
    int32_t game_time = 0,
    bool is_host = false,
    int32_t total_player_count = 0) {
  GameMatchingResponseBuilder builder_(_fbb);
  builder_.add_total_player_count(total_player_count);
  builder_.add_game_time(game_time);
  builder_.add_gamemode(gamemode);
  builder_.add_team(team);
  builder_.add_roomid(roomid);
  builder_.add_ingameid(ingameid);
  builder_.add_is_host(is_host);
  return builder_.Finish();
}

struct GameMatchingCancel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameMatchingCancelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct GameMatchingCancelBuilder {
  typedef GameMatchingCancel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(GameMatchingCancel::VT_ID, id, 0);
  }
  explicit GameMatchingCancelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameMatchingCancel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameMatchingCancel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameMatchingCancel> CreateGameMatchingCancel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  GameMatchingCancelBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct GachaRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GachaRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RANDOM_BOX_INDEX = 4
  };
  int32_t random_box_index() const {
    return GetField<int32_t>(VT_RANDOM_BOX_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RANDOM_BOX_INDEX, 4) &&
           verifier.EndTable();
  }
};

struct GachaRequestBuilder {
  typedef GachaRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_random_box_index(int32_t random_box_index) {
    fbb_.AddElement<int32_t>(GachaRequest::VT_RANDOM_BOX_INDEX, random_box_index, 0);
  }
  explicit GachaRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GachaRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GachaRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GachaRequest> CreateGachaRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t random_box_index = 0) {
  GachaRequestBuilder builder_(_fbb);
  builder_.add_random_box_index(random_box_index);
  return builder_.Finish();
}

struct GachaResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GachaResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM = 4
  };
  int32_t item() const {
    return GetField<int32_t>(VT_ITEM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ITEM, 4) &&
           verifier.EndTable();
  }
};

struct GachaResponseBuilder {
  typedef GachaResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_item(int32_t item) {
    fbb_.AddElement<int32_t>(GachaResponse::VT_ITEM, item, 0);
  }
  explicit GachaResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GachaResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GachaResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GachaResponse> CreateGachaResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t item = 0) {
  GachaResponseBuilder builder_(_fbb);
  builder_.add_item(item);
  return builder_.Finish();
}

}  // namespace LobbyTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_LOBBY_PACKETTABLE_LOBBYTABLE_H_
