// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_PACKETTABLE_PLAYERTABLE_H_
#define FLATBUFFERS_GENERATED_PLAYER_PACKETTABLE_PLAYERTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "Utilities_generated.h"

namespace PacketTable {
namespace PlayerTable {

struct PlayerPos;
struct PlayerPosBuilder;

struct PlayerInfo;
struct PlayerInfoBuilder;

struct PlayerSync;
struct PlayerSyncBuilder;

struct PlayerAdd;
struct PlayerAddBuilder;

struct PlayerDelete;
struct PlayerDeleteBuilder;

struct PlayerMove;
struct PlayerMoveBuilder;

struct PlayerStop;
struct PlayerStopBuilder;

struct PlayerGrabBomb;
struct PlayerGrabBombBuilder;

struct PlayerDropBomb;
struct PlayerDropBombBuilder;

struct PlayerThrowBomb;
struct PlayerThrowBombBuilder;

struct PlayerGrabWeapon;
struct PlayerGrabWeaponBuilder;

struct PlayerAnimation;
struct PlayerAnimationBuilder;

struct PlayerDead;
struct PlayerDeadBuilder;

struct PlayerDamageReceive;
struct PlayerDamageReceiveBuilder;

struct PlayerCalculatedDamage;
struct PlayerCalculatedDamageBuilder;

struct PlayerRespawn;
struct PlayerRespawnBuilder;

struct PlayerCollisionToBlock;
struct PlayerCollisionToBlockBuilder;

struct PlayerGroggy;
struct PlayerGroggyBuilder;

struct PlayerGroggyRecovery;
struct PlayerGroggyRecoveryBuilder;

struct PlayerGrabOtherPlayer;
struct PlayerGrabOtherPlayerBuilder;

struct PlayerThrowOtherPlayer;
struct PlayerThrowOtherPlayerBuilder;

struct PlayerFlyingKick;
struct PlayerFlyingKickBuilder;

struct PlayerDash;
struct PlayerDashBuilder;

struct PlayerPos FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerPosBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           verifier.EndTable();
  }
};

struct PlayerPosBuilder {
  typedef PlayerPos Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerPos::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerPos::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerPos::VT_DIRECTION, direction);
  }
  explicit PlayerPosBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerPos> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerPos>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerPos> CreatePlayerPos(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0) {
  PlayerPosBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_TEAM = 10,
    VT_CHARACTER_TYPE = 12,
    VT_NICKNAME = 14
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  int32_t character_type() const {
    return GetField<int32_t>(VT_CHARACTER_TYPE, 0);
  }
  const ::flatbuffers::String *nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           VerifyField<int32_t>(verifier, VT_CHARACTER_TYPE, 4) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           verifier.EndTable();
  }
};

struct PlayerInfoBuilder {
  typedef PlayerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerInfo::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerInfo::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerInfo::VT_DIRECTION, direction);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(PlayerInfo::VT_TEAM, team, 0);
  }
  void add_character_type(int32_t character_type) {
    fbb_.AddElement<int32_t>(PlayerInfo::VT_CHARACTER_TYPE, character_type, 0);
  }
  void add_nickname(::flatbuffers::Offset<::flatbuffers::String> nickname) {
    fbb_.AddOffset(PlayerInfo::VT_NICKNAME, nickname);
  }
  explicit PlayerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerInfo> CreatePlayerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t team = 0,
    int32_t character_type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nickname = 0) {
  PlayerInfoBuilder builder_(_fbb);
  builder_.add_nickname(nickname);
  builder_.add_character_type(character_type);
  builder_.add_team(team);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlayerInfo> CreatePlayerInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t team = 0,
    int32_t character_type = 0,
    const char *nickname = nullptr) {
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return PacketTable::PlayerTable::CreatePlayerInfo(
      _fbb,
      id,
      pos,
      direction,
      team,
      character_type,
      nickname__);
}

struct PlayerSync FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_STAMINA = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t stamina() const {
    return GetField<int32_t>(VT_STAMINA, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_STAMINA, 4) &&
           verifier.EndTable();
  }
};

struct PlayerSyncBuilder {
  typedef PlayerSync Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerSync::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerSync::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerSync::VT_DIRECTION, direction);
  }
  void add_stamina(int32_t stamina) {
    fbb_.AddElement<int32_t>(PlayerSync::VT_STAMINA, stamina, 0);
  }
  explicit PlayerSyncBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerSync>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerSync> CreatePlayerSync(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t stamina = 0) {
  PlayerSyncBuilder builder_(_fbb);
  builder_.add_stamina(stamina);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerAdd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerAddBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<PacketTable::PlayerTable::PlayerInfo>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PacketTable::PlayerTable::PlayerInfo>> *>(VT_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct PlayerAddBuilder {
  typedef PlayerAdd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PacketTable::PlayerTable::PlayerInfo>>> players) {
    fbb_.AddOffset(PlayerAdd::VT_PLAYERS, players);
  }
  explicit PlayerAddBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerAdd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerAdd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerAdd> CreatePlayerAdd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PacketTable::PlayerTable::PlayerInfo>>> players = 0) {
  PlayerAddBuilder builder_(_fbb);
  builder_.add_players(players);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlayerAdd> CreatePlayerAddDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<PacketTable::PlayerTable::PlayerInfo>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<PacketTable::PlayerTable::PlayerInfo>>(*players) : 0;
  return PacketTable::PlayerTable::CreatePlayerAdd(
      _fbb,
      players__);
}

struct PlayerDelete FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerDeleteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerDeleteBuilder {
  typedef PlayerDelete Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerDelete::VT_ID, id, 0);
  }
  explicit PlayerDeleteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerDelete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerDelete>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerDelete> CreatePlayerDelete(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  PlayerDeleteBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerMove FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_STATE = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t state() const {
    return GetField<int32_t>(VT_STATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_STATE, 4) &&
           verifier.EndTable();
  }
};

struct PlayerMoveBuilder {
  typedef PlayerMove Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerMove::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerMove::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerMove::VT_DIRECTION, direction);
  }
  void add_state(int32_t state) {
    fbb_.AddElement<int32_t>(PlayerMove::VT_STATE, state, 0);
  }
  explicit PlayerMoveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerMove>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerMove> CreatePlayerMove(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t state = 0) {
  PlayerMoveBuilder builder_(_fbb);
  builder_.add_state(state);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerStop FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerStopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_STATE = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t state() const {
    return GetField<int32_t>(VT_STATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_STATE, 4) &&
           verifier.EndTable();
  }
};

struct PlayerStopBuilder {
  typedef PlayerStop Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerStop::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerStop::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerStop::VT_DIRECTION, direction);
  }
  void add_state(int32_t state) {
    fbb_.AddElement<int32_t>(PlayerStop::VT_STATE, state, 0);
  }
  explicit PlayerStopBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerStop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerStop>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerStop> CreatePlayerStop(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t state = 0) {
  PlayerStopBuilder builder_(_fbb);
  builder_.add_state(state);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerGrabBomb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGrabBombBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_BOMB_ID = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t bomb_id() const {
    return GetField<int32_t>(VT_BOMB_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_BOMB_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerGrabBombBuilder {
  typedef PlayerGrabBomb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerGrabBomb::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerGrabBomb::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerGrabBomb::VT_DIRECTION, direction);
  }
  void add_bomb_id(int32_t bomb_id) {
    fbb_.AddElement<int32_t>(PlayerGrabBomb::VT_BOMB_ID, bomb_id, 0);
  }
  explicit PlayerGrabBombBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGrabBomb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGrabBomb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGrabBomb> CreatePlayerGrabBomb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t bomb_id = 0) {
  PlayerGrabBombBuilder builder_(_fbb);
  builder_.add_bomb_id(bomb_id);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerDropBomb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerDropBombBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_BOMB_ID = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  int32_t bomb_id() const {
    return GetField<int32_t>(VT_BOMB_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyField<int32_t>(verifier, VT_BOMB_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerDropBombBuilder {
  typedef PlayerDropBomb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerDropBomb::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerDropBomb::VT_POS, pos);
  }
  void add_bomb_id(int32_t bomb_id) {
    fbb_.AddElement<int32_t>(PlayerDropBomb::VT_BOMB_ID, bomb_id, 0);
  }
  explicit PlayerDropBombBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerDropBomb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerDropBomb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerDropBomb> CreatePlayerDropBomb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    int32_t bomb_id = 0) {
  PlayerDropBombBuilder builder_(_fbb);
  builder_.add_bomb_id(bomb_id);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerThrowBomb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerThrowBombBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_BOMB_ID = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t bomb_id() const {
    return GetField<int32_t>(VT_BOMB_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_BOMB_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerThrowBombBuilder {
  typedef PlayerThrowBomb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerThrowBomb::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerThrowBomb::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerThrowBomb::VT_DIRECTION, direction);
  }
  void add_bomb_id(int32_t bomb_id) {
    fbb_.AddElement<int32_t>(PlayerThrowBomb::VT_BOMB_ID, bomb_id, 0);
  }
  explicit PlayerThrowBombBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerThrowBomb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerThrowBomb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerThrowBomb> CreatePlayerThrowBomb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t bomb_id = 0) {
  PlayerThrowBombBuilder builder_(_fbb);
  builder_.add_bomb_id(bomb_id);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerGrabWeapon FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGrabWeaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_WEAPON_ID = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t weapon_id() const {
    return GetField<int32_t>(VT_WEAPON_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_WEAPON_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerGrabWeaponBuilder {
  typedef PlayerGrabWeapon Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerGrabWeapon::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerGrabWeapon::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerGrabWeapon::VT_DIRECTION, direction);
  }
  void add_weapon_id(int32_t weapon_id) {
    fbb_.AddElement<int32_t>(PlayerGrabWeapon::VT_WEAPON_ID, weapon_id, 0);
  }
  explicit PlayerGrabWeaponBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGrabWeapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGrabWeapon>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGrabWeapon> CreatePlayerGrabWeapon(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t weapon_id = 0) {
  PlayerGrabWeaponBuilder builder_(_fbb);
  builder_.add_weapon_id(weapon_id);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerAnimation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerAnimationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_ANIMATION = 10,
    VT_REMAIN_STAMINA = 12
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t animation() const {
    return GetField<int32_t>(VT_ANIMATION, 0);
  }
  int32_t remain_stamina() const {
    return GetField<int32_t>(VT_REMAIN_STAMINA, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_ANIMATION, 4) &&
           VerifyField<int32_t>(verifier, VT_REMAIN_STAMINA, 4) &&
           verifier.EndTable();
  }
};

struct PlayerAnimationBuilder {
  typedef PlayerAnimation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerAnimation::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerAnimation::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerAnimation::VT_DIRECTION, direction);
  }
  void add_animation(int32_t animation) {
    fbb_.AddElement<int32_t>(PlayerAnimation::VT_ANIMATION, animation, 0);
  }
  void add_remain_stamina(int32_t remain_stamina) {
    fbb_.AddElement<int32_t>(PlayerAnimation::VT_REMAIN_STAMINA, remain_stamina, 0);
  }
  explicit PlayerAnimationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerAnimation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerAnimation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerAnimation> CreatePlayerAnimation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t animation = 0,
    int32_t remain_stamina = 0) {
  PlayerAnimationBuilder builder_(_fbb);
  builder_.add_remain_stamina(remain_stamina);
  builder_.add_animation(animation);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerDead FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerDeadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_RESPAWN_TIME = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t respawn_time() const {
    return GetField<int32_t>(VT_RESPAWN_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_RESPAWN_TIME, 4) &&
           verifier.EndTable();
  }
};

struct PlayerDeadBuilder {
  typedef PlayerDead Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerDead::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerDead::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerDead::VT_DIRECTION, direction);
  }
  void add_respawn_time(int32_t respawn_time) {
    fbb_.AddElement<int32_t>(PlayerDead::VT_RESPAWN_TIME, respawn_time, 0);
  }
  explicit PlayerDeadBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerDead> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerDead>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerDead> CreatePlayerDead(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t respawn_time = 0) {
  PlayerDeadBuilder builder_(_fbb);
  builder_.add_respawn_time(respawn_time);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerDamageReceive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerDamageReceiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_targetID = 4,
    VT_attackerID = 6,
    VT_WEAPON = 8,
    VT_ATTACK_TYPE = 10,
    VT_KNOCKBACK_DIRECTION = 12
  };
  int32_t targetID() const {
    return GetField<int32_t>(VT_targetID, 0);
  }
  int32_t attackerID() const {
    return GetField<int32_t>(VT_attackerID, 0);
  }
  int32_t weapon() const {
    return GetField<int32_t>(VT_WEAPON, 0);
  }
  int32_t attack_type() const {
    return GetField<int32_t>(VT_ATTACK_TYPE, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *knockback_direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_KNOCKBACK_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_targetID, 4) &&
           VerifyField<int32_t>(verifier, VT_attackerID, 4) &&
           VerifyField<int32_t>(verifier, VT_WEAPON, 4) &&
           VerifyField<int32_t>(verifier, VT_ATTACK_TYPE, 4) &&
           VerifyOffset(verifier, VT_KNOCKBACK_DIRECTION) &&
           verifier.VerifyTable(knockback_direction()) &&
           verifier.EndTable();
  }
};

struct PlayerDamageReceiveBuilder {
  typedef PlayerDamageReceive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_targetID(int32_t targetID) {
    fbb_.AddElement<int32_t>(PlayerDamageReceive::VT_targetID, targetID, 0);
  }
  void add_attackerID(int32_t attackerID) {
    fbb_.AddElement<int32_t>(PlayerDamageReceive::VT_attackerID, attackerID, 0);
  }
  void add_weapon(int32_t weapon) {
    fbb_.AddElement<int32_t>(PlayerDamageReceive::VT_WEAPON, weapon, 0);
  }
  void add_attack_type(int32_t attack_type) {
    fbb_.AddElement<int32_t>(PlayerDamageReceive::VT_ATTACK_TYPE, attack_type, 0);
  }
  void add_knockback_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> knockback_direction) {
    fbb_.AddOffset(PlayerDamageReceive::VT_KNOCKBACK_DIRECTION, knockback_direction);
  }
  explicit PlayerDamageReceiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerDamageReceive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerDamageReceive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerDamageReceive> CreatePlayerDamageReceive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t targetID = 0,
    int32_t attackerID = 0,
    int32_t weapon = 0,
    int32_t attack_type = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> knockback_direction = 0) {
  PlayerDamageReceiveBuilder builder_(_fbb);
  builder_.add_knockback_direction(knockback_direction);
  builder_.add_attack_type(attack_type);
  builder_.add_weapon(weapon);
  builder_.add_attackerID(attackerID);
  builder_.add_targetID(targetID);
  return builder_.Finish();
}

struct PlayerCalculatedDamage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerCalculatedDamageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_targetID = 4,
    VT_ATTACK_TYPE = 6,
    VT_HP = 8,
    VT_DAMAGE_AMOUNT = 10,
    VT_TARGET_STAMINA_LOSS = 12,
    VT_KNOCKBACK_DIRECTION = 14
  };
  int32_t targetID() const {
    return GetField<int32_t>(VT_targetID, 0);
  }
  int32_t attack_type() const {
    return GetField<int32_t>(VT_ATTACK_TYPE, 0);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 0);
  }
  int32_t damage_amount() const {
    return GetField<int32_t>(VT_DAMAGE_AMOUNT, 0);
  }
  int32_t target_stamina_loss() const {
    return GetField<int32_t>(VT_TARGET_STAMINA_LOSS, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *knockback_direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_KNOCKBACK_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_targetID, 4) &&
           VerifyField<int32_t>(verifier, VT_ATTACK_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_HP, 4) &&
           VerifyField<int32_t>(verifier, VT_DAMAGE_AMOUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_TARGET_STAMINA_LOSS, 4) &&
           VerifyOffset(verifier, VT_KNOCKBACK_DIRECTION) &&
           verifier.VerifyTable(knockback_direction()) &&
           verifier.EndTable();
  }
};

struct PlayerCalculatedDamageBuilder {
  typedef PlayerCalculatedDamage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_targetID(int32_t targetID) {
    fbb_.AddElement<int32_t>(PlayerCalculatedDamage::VT_targetID, targetID, 0);
  }
  void add_attack_type(int32_t attack_type) {
    fbb_.AddElement<int32_t>(PlayerCalculatedDamage::VT_ATTACK_TYPE, attack_type, 0);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(PlayerCalculatedDamage::VT_HP, hp, 0);
  }
  void add_damage_amount(int32_t damage_amount) {
    fbb_.AddElement<int32_t>(PlayerCalculatedDamage::VT_DAMAGE_AMOUNT, damage_amount, 0);
  }
  void add_target_stamina_loss(int32_t target_stamina_loss) {
    fbb_.AddElement<int32_t>(PlayerCalculatedDamage::VT_TARGET_STAMINA_LOSS, target_stamina_loss, 0);
  }
  void add_knockback_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> knockback_direction) {
    fbb_.AddOffset(PlayerCalculatedDamage::VT_KNOCKBACK_DIRECTION, knockback_direction);
  }
  explicit PlayerCalculatedDamageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerCalculatedDamage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerCalculatedDamage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerCalculatedDamage> CreatePlayerCalculatedDamage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t targetID = 0,
    int32_t attack_type = 0,
    int32_t hp = 0,
    int32_t damage_amount = 0,
    int32_t target_stamina_loss = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> knockback_direction = 0) {
  PlayerCalculatedDamageBuilder builder_(_fbb);
  builder_.add_knockback_direction(knockback_direction);
  builder_.add_target_stamina_loss(target_stamina_loss);
  builder_.add_damage_amount(damage_amount);
  builder_.add_hp(hp);
  builder_.add_attack_type(attack_type);
  builder_.add_targetID(targetID);
  return builder_.Finish();
}

struct PlayerRespawn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerRespawnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_HP = 6,
    VT_POS = 8,
    VT_DIRECTION = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_HP, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           verifier.EndTable();
  }
};

struct PlayerRespawnBuilder {
  typedef PlayerRespawn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerRespawn::VT_ID, id, 0);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(PlayerRespawn::VT_HP, hp, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerRespawn::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerRespawn::VT_DIRECTION, direction);
  }
  explicit PlayerRespawnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerRespawn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerRespawn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerRespawn> CreatePlayerRespawn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t hp = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0) {
  PlayerRespawnBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerCollisionToBlock FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerCollisionToBlockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerCollisionToBlockBuilder {
  typedef PlayerCollisionToBlock Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerCollisionToBlock::VT_ID, id, 0);
  }
  explicit PlayerCollisionToBlockBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerCollisionToBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerCollisionToBlock>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerCollisionToBlock> CreatePlayerCollisionToBlock(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  PlayerCollisionToBlockBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerGroggy FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGroggyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
};

struct PlayerGroggyBuilder {
  typedef PlayerGroggy Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerGroggy::VT_ID, id, 0);
  }
  explicit PlayerGroggyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGroggy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGroggy>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGroggy> CreatePlayerGroggy(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  PlayerGroggyBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerGroggyRecovery FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGroggyRecoveryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_RECOVERY_VALUE = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t recovery_value() const {
    return GetField<int32_t>(VT_RECOVERY_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_RECOVERY_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct PlayerGroggyRecoveryBuilder {
  typedef PlayerGroggyRecovery Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerGroggyRecovery::VT_ID, id, 0);
  }
  void add_recovery_value(int32_t recovery_value) {
    fbb_.AddElement<int32_t>(PlayerGroggyRecovery::VT_RECOVERY_VALUE, recovery_value, 0);
  }
  explicit PlayerGroggyRecoveryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGroggyRecovery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGroggyRecovery>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGroggyRecovery> CreatePlayerGroggyRecovery(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t recovery_value = 0) {
  PlayerGroggyRecoveryBuilder builder_(_fbb);
  builder_.add_recovery_value(recovery_value);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerGrabOtherPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGrabOtherPlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_HAND_POS = 10,
    VT_IS_LEFT_HAND = 12,
    VT_targetID = 14,
    VT_TARGET_HEAD_POS = 16
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  const PacketTable::UtilitiesTable::Vec3f *hand_pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_HAND_POS);
  }
  bool is_left_hand() const {
    return GetField<uint8_t>(VT_IS_LEFT_HAND, 0) != 0;
  }
  int32_t targetID() const {
    return GetField<int32_t>(VT_targetID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *target_head_pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_TARGET_HEAD_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyOffset(verifier, VT_HAND_POS) &&
           verifier.VerifyTable(hand_pos()) &&
           VerifyField<uint8_t>(verifier, VT_IS_LEFT_HAND, 1) &&
           VerifyField<int32_t>(verifier, VT_targetID, 4) &&
           VerifyOffset(verifier, VT_TARGET_HEAD_POS) &&
           verifier.VerifyTable(target_head_pos()) &&
           verifier.EndTable();
  }
};

struct PlayerGrabOtherPlayerBuilder {
  typedef PlayerGrabOtherPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerGrabOtherPlayer::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerGrabOtherPlayer::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerGrabOtherPlayer::VT_DIRECTION, direction);
  }
  void add_hand_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> hand_pos) {
    fbb_.AddOffset(PlayerGrabOtherPlayer::VT_HAND_POS, hand_pos);
  }
  void add_is_left_hand(bool is_left_hand) {
    fbb_.AddElement<uint8_t>(PlayerGrabOtherPlayer::VT_IS_LEFT_HAND, static_cast<uint8_t>(is_left_hand), 0);
  }
  void add_targetID(int32_t targetID) {
    fbb_.AddElement<int32_t>(PlayerGrabOtherPlayer::VT_targetID, targetID, 0);
  }
  void add_target_head_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> target_head_pos) {
    fbb_.AddOffset(PlayerGrabOtherPlayer::VT_TARGET_HEAD_POS, target_head_pos);
  }
  explicit PlayerGrabOtherPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGrabOtherPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGrabOtherPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGrabOtherPlayer> CreatePlayerGrabOtherPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> hand_pos = 0,
    bool is_left_hand = false,
    int32_t targetID = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> target_head_pos = 0) {
  PlayerGrabOtherPlayerBuilder builder_(_fbb);
  builder_.add_target_head_pos(target_head_pos);
  builder_.add_targetID(targetID);
  builder_.add_hand_pos(hand_pos);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  builder_.add_is_left_hand(is_left_hand);
  return builder_.Finish();
}

struct PlayerThrowOtherPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerThrowOtherPlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POS = 6,
    VT_DIRECTION = 8,
    VT_targetID = 10,
    VT_TARGET_POS = 12,
    VT_TARGET_DIRECTION = 14
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_DIRECTION);
  }
  int32_t targetID() const {
    return GetField<int32_t>(VT_targetID, 0);
  }
  const PacketTable::UtilitiesTable::Vec3f *target_pos() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_TARGET_POS);
  }
  const PacketTable::UtilitiesTable::Vec3f *target_direction() const {
    return GetPointer<const PacketTable::UtilitiesTable::Vec3f *>(VT_TARGET_DIRECTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyTable(direction()) &&
           VerifyField<int32_t>(verifier, VT_targetID, 4) &&
           VerifyOffset(verifier, VT_TARGET_POS) &&
           verifier.VerifyTable(target_pos()) &&
           VerifyOffset(verifier, VT_TARGET_DIRECTION) &&
           verifier.VerifyTable(target_direction()) &&
           verifier.EndTable();
  }
};

struct PlayerThrowOtherPlayerBuilder {
  typedef PlayerThrowOtherPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerThrowOtherPlayer::VT_ID, id, 0);
  }
  void add_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos) {
    fbb_.AddOffset(PlayerThrowOtherPlayer::VT_POS, pos);
  }
  void add_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction) {
    fbb_.AddOffset(PlayerThrowOtherPlayer::VT_DIRECTION, direction);
  }
  void add_targetID(int32_t targetID) {
    fbb_.AddElement<int32_t>(PlayerThrowOtherPlayer::VT_targetID, targetID, 0);
  }
  void add_target_pos(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> target_pos) {
    fbb_.AddOffset(PlayerThrowOtherPlayer::VT_TARGET_POS, target_pos);
  }
  void add_target_direction(::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> target_direction) {
    fbb_.AddOffset(PlayerThrowOtherPlayer::VT_TARGET_DIRECTION, target_direction);
  }
  explicit PlayerThrowOtherPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerThrowOtherPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerThrowOtherPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerThrowOtherPlayer> CreatePlayerThrowOtherPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> direction = 0,
    int32_t targetID = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> target_pos = 0,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Vec3f> target_direction = 0) {
  PlayerThrowOtherPlayerBuilder builder_(_fbb);
  builder_.add_target_direction(target_direction);
  builder_.add_target_pos(target_pos);
  builder_.add_targetID(targetID);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_id(id);
  return builder_.Finish();
}

struct PlayerFlyingKick FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerFlyingKickBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_INFO = 4
  };
  const PacketTable::PlayerTable::PlayerPos *player_info() const {
    return GetPointer<const PacketTable::PlayerTable::PlayerPos *>(VT_PLAYER_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_INFO) &&
           verifier.VerifyTable(player_info()) &&
           verifier.EndTable();
  }
};

struct PlayerFlyingKickBuilder {
  typedef PlayerFlyingKick Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_info(::flatbuffers::Offset<PacketTable::PlayerTable::PlayerPos> player_info) {
    fbb_.AddOffset(PlayerFlyingKick::VT_PLAYER_INFO, player_info);
  }
  explicit PlayerFlyingKickBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerFlyingKick> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerFlyingKick>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerFlyingKick> CreatePlayerFlyingKick(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PacketTable::PlayerTable::PlayerPos> player_info = 0) {
  PlayerFlyingKickBuilder builder_(_fbb);
  builder_.add_player_info(player_info);
  return builder_.Finish();
}

struct PlayerDash FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerDashBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_INFO = 4
  };
  const PacketTable::PlayerTable::PlayerPos *player_info() const {
    return GetPointer<const PacketTable::PlayerTable::PlayerPos *>(VT_PLAYER_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_INFO) &&
           verifier.VerifyTable(player_info()) &&
           verifier.EndTable();
  }
};

struct PlayerDashBuilder {
  typedef PlayerDash Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_info(::flatbuffers::Offset<PacketTable::PlayerTable::PlayerPos> player_info) {
    fbb_.AddOffset(PlayerDash::VT_PLAYER_INFO, player_info);
  }
  explicit PlayerDashBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerDash> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerDash>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerDash> CreatePlayerDash(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<PacketTable::PlayerTable::PlayerPos> player_info = 0) {
  PlayerDashBuilder builder_(_fbb);
  builder_.add_player_info(player_info);
  return builder_.Finish();
}

inline const PacketTable::PlayerTable::PlayerPos *GetPlayerPos(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::PlayerTable::PlayerPos>(buf);
}

inline const PacketTable::PlayerTable::PlayerPos *GetSizePrefixedPlayerPos(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::PlayerTable::PlayerPos>(buf);
}

inline bool VerifyPlayerPosBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::PlayerTable::PlayerPos>(nullptr);
}

inline bool VerifySizePrefixedPlayerPosBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::PlayerTable::PlayerPos>(nullptr);
}

inline void FinishPlayerPosBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::PlayerTable::PlayerPos> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerPosBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::PlayerTable::PlayerPos> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PlayerTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_PLAYER_PACKETTABLE_PLAYERTABLE_H_
