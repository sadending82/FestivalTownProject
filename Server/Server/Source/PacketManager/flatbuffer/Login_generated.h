// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGIN_PACKETTABLE_LOGINTABLE_H_
#define FLATBUFFERS_GENERATED_LOGIN_PACKETTABLE_LOGINTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace LoginTable {

struct SignUpRequest;
struct SignUpRequestBuilder;

struct SignUpResponse;
struct SignUpResponseBuilder;

struct LoginRequest;
struct LoginRequestBuilder;

struct LoginResponse;
struct LoginResponseBuilder;

struct SignUpRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SignUpRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_ID = 4,
    VT_ACCOUNT_PASSWORD = 6,
    VT_NICKNAME = 8
  };
  const ::flatbuffers::String *account_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT_ID);
  }
  const ::flatbuffers::String *account_password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT_PASSWORD);
  }
  const ::flatbuffers::String *nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT_ID) &&
           verifier.VerifyString(account_id()) &&
           VerifyOffset(verifier, VT_ACCOUNT_PASSWORD) &&
           verifier.VerifyString(account_password()) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           verifier.EndTable();
  }
};

struct SignUpRequestBuilder {
  typedef SignUpRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account_id(::flatbuffers::Offset<::flatbuffers::String> account_id) {
    fbb_.AddOffset(SignUpRequest::VT_ACCOUNT_ID, account_id);
  }
  void add_account_password(::flatbuffers::Offset<::flatbuffers::String> account_password) {
    fbb_.AddOffset(SignUpRequest::VT_ACCOUNT_PASSWORD, account_password);
  }
  void add_nickname(::flatbuffers::Offset<::flatbuffers::String> nickname) {
    fbb_.AddOffset(SignUpRequest::VT_NICKNAME, nickname);
  }
  explicit SignUpRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SignUpRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SignUpRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SignUpRequest> CreateSignUpRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> account_password = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nickname = 0) {
  SignUpRequestBuilder builder_(_fbb);
  builder_.add_nickname(nickname);
  builder_.add_account_password(account_password);
  builder_.add_account_id(account_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SignUpRequest> CreateSignUpRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account_id = nullptr,
    const char *account_password = nullptr,
    const char *nickname = nullptr) {
  auto account_id__ = account_id ? _fbb.CreateString(account_id) : 0;
  auto account_password__ = account_password ? _fbb.CreateString(account_password) : 0;
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return PacketTable::LoginTable::CreateSignUpRequest(
      _fbb,
      account_id__,
      account_password__,
      nickname__);
}

struct SignUpResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SignUpResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4
  };
  int32_t result_code() const {
    return GetField<int32_t>(VT_RESULT_CODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct SignUpResponseBuilder {
  typedef SignUpResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(int32_t result_code) {
    fbb_.AddElement<int32_t>(SignUpResponse::VT_RESULT_CODE, result_code, 0);
  }
  explicit SignUpResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SignUpResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SignUpResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SignUpResponse> CreateSignUpResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t result_code = 0) {
  SignUpResponseBuilder builder_(_fbb);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_ID = 4,
    VT_ACCOUNT_PASSWORD = 6
  };
  const ::flatbuffers::String *account_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT_ID);
  }
  const ::flatbuffers::String *account_password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT_ID) &&
           verifier.VerifyString(account_id()) &&
           VerifyOffset(verifier, VT_ACCOUNT_PASSWORD) &&
           verifier.VerifyString(account_password()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  typedef LoginRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account_id(::flatbuffers::Offset<::flatbuffers::String> account_id) {
    fbb_.AddOffset(LoginRequest::VT_ACCOUNT_ID, account_id);
  }
  void add_account_password(::flatbuffers::Offset<::flatbuffers::String> account_password) {
    fbb_.AddOffset(LoginRequest::VT_ACCOUNT_PASSWORD, account_password);
  }
  explicit LoginRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginRequest> CreateLoginRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> account_password = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_account_password(account_password);
  builder_.add_account_id(account_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginRequest> CreateLoginRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account_id = nullptr,
    const char *account_password = nullptr) {
  auto account_id__ = account_id ? _fbb.CreateString(account_id) : 0;
  auto account_password__ = account_password ? _fbb.CreateString(account_password) : 0;
  return PacketTable::LoginTable::CreateLoginRequest(
      _fbb,
      account_id__,
      account_password__);
}

struct LoginResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4
  };
  int32_t result_code() const {
    return GetField<int32_t>(VT_RESULT_CODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct LoginResponseBuilder {
  typedef LoginResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(int32_t result_code) {
    fbb_.AddElement<int32_t>(LoginResponse::VT_RESULT_CODE, result_code, 0);
  }
  explicit LoginResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginResponse> CreateLoginResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t result_code = 0) {
  LoginResponseBuilder builder_(_fbb);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

}  // namespace LoginTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_LOGIN_PACKETTABLE_LOGINTABLE_H_
