// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILITIES_PACKETTABLE_UTILITIESTABLE_H_
#define FLATBUFFERS_GENERATED_UTILITIES_PACKETTABLE_UTILITIESTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace UtilitiesTable {

struct Utilities;
struct UtilitiesBuilder;

struct HeartBeat;
struct HeartBeatBuilder;

struct Vec2i;
struct Vec2iBuilder;

struct Vec3f;
struct Vec3fBuilder;

struct Utilities FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UtilitiesBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UtilitiesBuilder {
  typedef Utilities Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit UtilitiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Utilities> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Utilities>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Utilities> CreateUtilities(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  UtilitiesBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HeartBeat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeartBeatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  int64_t time() const {
    return GetField<int64_t>(VT_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIME, 8) &&
           verifier.EndTable();
  }
};

struct HeartBeatBuilder {
  typedef HeartBeat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_time(int64_t time) {
    fbb_.AddElement<int64_t>(HeartBeat::VT_TIME, time, 0);
  }
  explicit HeartBeatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HeartBeat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HeartBeat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HeartBeat> CreateHeartBeat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t time = 0) {
  HeartBeatBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

struct Vec2i FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec2iBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vec2iBuilder {
  typedef Vec2i Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Vec2i::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Vec2i::VT_Y, y, 0);
  }
  explicit Vec2iBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec2i> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec2i>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec2i> CreateVec2i(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0) {
  Vec2iBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Vec3f FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec3fBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct Vec3fBuilder {
  typedef Vec3f Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vec3f::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vec3f::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Vec3f::VT_Z, z, 0.0f);
  }
  explicit Vec3fBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec3f> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec3f>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec3f> CreateVec3f(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  Vec3fBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const PacketTable::UtilitiesTable::Utilities *GetUtilities(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::UtilitiesTable::Utilities>(buf);
}

inline const PacketTable::UtilitiesTable::Utilities *GetSizePrefixedUtilities(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::UtilitiesTable::Utilities>(buf);
}

inline bool VerifyUtilitiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::UtilitiesTable::Utilities>(nullptr);
}

inline bool VerifySizePrefixedUtilitiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::UtilitiesTable::Utilities>(nullptr);
}

inline void FinishUtilitiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Utilities> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilitiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Utilities> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace UtilitiesTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_UTILITIES_PACKETTABLE_UTILITIESTABLE_H_
