// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UTILITIES_PACKETTABLE_UTILITIESTABLE_H_
#define FLATBUFFERS_GENERATED_UTILITIES_PACKETTABLE_UTILITIESTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace UtilitiesTable {

struct Utilities;
struct UtilitiesBuilder;

struct HeartBeat;
struct HeartBeatBuilder;

struct Customizing;
struct CustomizingBuilder;

struct PlayerGameRecord;
struct PlayerGameRecordBuilder;

struct Vec2i;
struct Vec2iBuilder;

struct Vec3f;
struct Vec3fBuilder;

struct Utilities FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UtilitiesBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UtilitiesBuilder {
  typedef Utilities Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit UtilitiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Utilities> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Utilities>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Utilities> CreateUtilities(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  UtilitiesBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HeartBeat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeartBeatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  int64_t time() const {
    return GetField<int64_t>(VT_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIME, 8) &&
           verifier.EndTable();
  }
};

struct HeartBeatBuilder {
  typedef HeartBeat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_time(int64_t time) {
    fbb_.AddElement<int64_t>(HeartBeat::VT_TIME, time, 0);
  }
  explicit HeartBeatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HeartBeat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HeartBeat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HeartBeat> CreateHeartBeat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t time = 0) {
  HeartBeatBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

struct Customizing FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CustomizingBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CustomizingBuilder {
  typedef Customizing Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CustomizingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Customizing> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Customizing>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Customizing> CreateCustomizing(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CustomizingBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlayerGameRecord FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerGameRecordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_TEAM = 8,
    VT_KILL_COUNT = 10,
    VT_DEATH_COUNT = 12,
    VT_BOMB_INSERT_COUNT = 14,
    VT_EARN_GOLD = 16,
    VT_POINT = 18,
    VT_IS_MVP = 20
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  int32_t kill_count() const {
    return GetField<int32_t>(VT_KILL_COUNT, 0);
  }
  int32_t death_count() const {
    return GetField<int32_t>(VT_DEATH_COUNT, 0);
  }
  int32_t bomb_insert_count() const {
    return GetField<int32_t>(VT_BOMB_INSERT_COUNT, 0);
  }
  int32_t earn_gold() const {
    return GetField<int32_t>(VT_EARN_GOLD, 0);
  }
  int32_t point() const {
    return GetField<int32_t>(VT_POINT, 0);
  }
  bool is_mvp() const {
    return GetField<uint8_t>(VT_IS_MVP, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           VerifyField<int32_t>(verifier, VT_KILL_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_DEATH_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_BOMB_INSERT_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_EARN_GOLD, 4) &&
           VerifyField<int32_t>(verifier, VT_POINT, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_MVP, 1) &&
           verifier.EndTable();
  }
};

struct PlayerGameRecordBuilder {
  typedef PlayerGameRecord Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(PlayerGameRecord::VT_NAME, name);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_TEAM, team, 0);
  }
  void add_kill_count(int32_t kill_count) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_KILL_COUNT, kill_count, 0);
  }
  void add_death_count(int32_t death_count) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_DEATH_COUNT, death_count, 0);
  }
  void add_bomb_insert_count(int32_t bomb_insert_count) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_BOMB_INSERT_COUNT, bomb_insert_count, 0);
  }
  void add_earn_gold(int32_t earn_gold) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_EARN_GOLD, earn_gold, 0);
  }
  void add_point(int32_t point) {
    fbb_.AddElement<int32_t>(PlayerGameRecord::VT_POINT, point, 0);
  }
  void add_is_mvp(bool is_mvp) {
    fbb_.AddElement<uint8_t>(PlayerGameRecord::VT_IS_MVP, static_cast<uint8_t>(is_mvp), 0);
  }
  explicit PlayerGameRecordBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerGameRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerGameRecord>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerGameRecord> CreatePlayerGameRecord(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t team = 0,
    int32_t kill_count = 0,
    int32_t death_count = 0,
    int32_t bomb_insert_count = 0,
    int32_t earn_gold = 0,
    int32_t point = 0,
    bool is_mvp = false) {
  PlayerGameRecordBuilder builder_(_fbb);
  builder_.add_point(point);
  builder_.add_earn_gold(earn_gold);
  builder_.add_bomb_insert_count(bomb_insert_count);
  builder_.add_death_count(death_count);
  builder_.add_kill_count(kill_count);
  builder_.add_team(team);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_is_mvp(is_mvp);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlayerGameRecord> CreatePlayerGameRecordDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    int32_t team = 0,
    int32_t kill_count = 0,
    int32_t death_count = 0,
    int32_t bomb_insert_count = 0,
    int32_t earn_gold = 0,
    int32_t point = 0,
    bool is_mvp = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return PacketTable::UtilitiesTable::CreatePlayerGameRecord(
      _fbb,
      id,
      name__,
      team,
      kill_count,
      death_count,
      bomb_insert_count,
      earn_gold,
      point,
      is_mvp);
}

struct Vec2i FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec2iBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vec2iBuilder {
  typedef Vec2i Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Vec2i::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Vec2i::VT_Y, y, 0);
  }
  explicit Vec2iBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec2i> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec2i>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec2i> CreateVec2i(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0) {
  Vec2iBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Vec3f FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec3fBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct Vec3fBuilder {
  typedef Vec3f Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vec3f::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vec3f::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Vec3f::VT_Z, z, 0.0f);
  }
  explicit Vec3fBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec3f> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec3f>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec3f> CreateVec3f(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  Vec3fBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const PacketTable::UtilitiesTable::Utilities *GetUtilities(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::UtilitiesTable::Utilities>(buf);
}

inline const PacketTable::UtilitiesTable::Utilities *GetSizePrefixedUtilities(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::UtilitiesTable::Utilities>(buf);
}

inline bool VerifyUtilitiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::UtilitiesTable::Utilities>(nullptr);
}

inline bool VerifySizePrefixedUtilitiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::UtilitiesTable::Utilities>(nullptr);
}

inline void FinishUtilitiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Utilities> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUtilitiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::UtilitiesTable::Utilities> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace UtilitiesTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_UTILITIES_PACKETTABLE_UTILITIESTABLE_H_
