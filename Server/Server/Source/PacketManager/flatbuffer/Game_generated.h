// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAME_PACKETTABLE_GAMETABLE_H_
#define FLATBUFFERS_GENERATED_GAME_PACKETTABLE_GAMETABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace PacketTable {
namespace GameTable {

struct Game;
struct GameBuilder;

struct GameReady;
struct GameReadyBuilder;

struct AllPlayerReady;
struct AllPlayerReadyBuilder;

struct GameStart;
struct GameStartBuilder;

struct GameEnd;
struct GameEndBuilder;

struct BombInput;
struct BombInputBuilder;

struct LifeReduce;
struct LifeReduceBuilder;

struct RemainTimeSync;
struct RemainTimeSyncBuilder;

struct Game FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GameBuilder {
  typedef Game Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit GameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Game> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Game>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Game> CreateGame(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  GameBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GameReady FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameReadyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOMID = 4
  };
  int32_t roomid() const {
    return GetField<int32_t>(VT_ROOMID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROOMID, 4) &&
           verifier.EndTable();
  }
};

struct GameReadyBuilder {
  typedef GameReady Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_roomid(int32_t roomid) {
    fbb_.AddElement<int32_t>(GameReady::VT_ROOMID, roomid, 0);
  }
  explicit GameReadyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameReady> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameReady>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameReady> CreateGameReady(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t roomid = 0) {
  GameReadyBuilder builder_(_fbb);
  builder_.add_roomid(roomid);
  return builder_.Finish();
}

struct AllPlayerReady FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AllPlayerReadyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOMID = 4
  };
  int32_t roomid() const {
    return GetField<int32_t>(VT_ROOMID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROOMID, 4) &&
           verifier.EndTable();
  }
};

struct AllPlayerReadyBuilder {
  typedef AllPlayerReady Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_roomid(int32_t roomid) {
    fbb_.AddElement<int32_t>(AllPlayerReady::VT_ROOMID, roomid, 0);
  }
  explicit AllPlayerReadyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AllPlayerReady> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AllPlayerReady>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AllPlayerReady> CreateAllPlayerReady(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t roomid = 0) {
  AllPlayerReadyBuilder builder_(_fbb);
  builder_.add_roomid(roomid);
  return builder_.Finish();
}

struct GameStart FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOMID = 4,
    VT_TIME = 6
  };
  int32_t roomid() const {
    return GetField<int32_t>(VT_ROOMID, 0);
  }
  int64_t time() const {
    return GetField<int64_t>(VT_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROOMID, 4) &&
           VerifyField<int64_t>(verifier, VT_TIME, 8) &&
           verifier.EndTable();
  }
};

struct GameStartBuilder {
  typedef GameStart Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_roomid(int32_t roomid) {
    fbb_.AddElement<int32_t>(GameStart::VT_ROOMID, roomid, 0);
  }
  void add_time(int64_t time) {
    fbb_.AddElement<int64_t>(GameStart::VT_TIME, time, 0);
  }
  explicit GameStartBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameStart>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameStart> CreateGameStart(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t roomid = 0,
    int64_t time = 0) {
  GameStartBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_roomid(roomid);
  return builder_.Finish();
}

struct GameEnd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameEndBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WINNINGTEAMS_FLAG = 4
  };
  uint8_t winningteams_flag() const {
    return GetField<uint8_t>(VT_WINNINGTEAMS_FLAG, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WINNINGTEAMS_FLAG, 1) &&
           verifier.EndTable();
  }
};

struct GameEndBuilder {
  typedef GameEnd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_winningteams_flag(uint8_t winningteams_flag) {
    fbb_.AddElement<uint8_t>(GameEnd::VT_WINNINGTEAMS_FLAG, winningteams_flag, 0);
  }
  explicit GameEndBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameEnd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameEnd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameEnd> CreateGameEnd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t winningteams_flag = 0) {
  GameEndBuilder builder_(_fbb);
  builder_.add_winningteams_flag(winningteams_flag);
  return builder_.Finish();
}

struct BombInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BombInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_BOMBID = 6,
    VT_TEAM = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t bombid() const {
    return GetField<int32_t>(VT_BOMBID, 0);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_BOMBID, 4) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           verifier.EndTable();
  }
};

struct BombInputBuilder {
  typedef BombInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(BombInput::VT_ID, id, 0);
  }
  void add_bombid(int32_t bombid) {
    fbb_.AddElement<int32_t>(BombInput::VT_BOMBID, bombid, 0);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(BombInput::VT_TEAM, team, 0);
  }
  explicit BombInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BombInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BombInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BombInput> CreateBombInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t bombid = 0,
    int32_t team = 0) {
  BombInputBuilder builder_(_fbb);
  builder_.add_team(team);
  builder_.add_bombid(bombid);
  builder_.add_id(id);
  return builder_.Finish();
}

struct LifeReduce FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LifeReduceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEAM = 4,
    VT_LIFE = 6
  };
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  int32_t life() const {
    return GetField<int32_t>(VT_LIFE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEAM, 4) &&
           VerifyField<int32_t>(verifier, VT_LIFE, 4) &&
           verifier.EndTable();
  }
};

struct LifeReduceBuilder {
  typedef LifeReduce Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(LifeReduce::VT_TEAM, team, 0);
  }
  void add_life(int32_t life) {
    fbb_.AddElement<int32_t>(LifeReduce::VT_LIFE, life, 0);
  }
  explicit LifeReduceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LifeReduce> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LifeReduce>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LifeReduce> CreateLifeReduce(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t team = 0,
    int32_t life = 0) {
  LifeReduceBuilder builder_(_fbb);
  builder_.add_life(life);
  builder_.add_team(team);
  return builder_.Finish();
}

struct RemainTimeSync FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemainTimeSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REMAIN_TIME = 4
  };
  int32_t remain_time() const {
    return GetField<int32_t>(VT_REMAIN_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_REMAIN_TIME, 4) &&
           verifier.EndTable();
  }
};

struct RemainTimeSyncBuilder {
  typedef RemainTimeSync Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_remain_time(int32_t remain_time) {
    fbb_.AddElement<int32_t>(RemainTimeSync::VT_REMAIN_TIME, remain_time, 0);
  }
  explicit RemainTimeSyncBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RemainTimeSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RemainTimeSync>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RemainTimeSync> CreateRemainTimeSync(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t remain_time = 0) {
  RemainTimeSyncBuilder builder_(_fbb);
  builder_.add_remain_time(remain_time);
  return builder_.Finish();
}

inline const PacketTable::GameTable::Game *GetGame(const void *buf) {
  return ::flatbuffers::GetRoot<PacketTable::GameTable::Game>(buf);
}

inline const PacketTable::GameTable::Game *GetSizePrefixedGame(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PacketTable::GameTable::Game>(buf);
}

inline bool VerifyGameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketTable::GameTable::Game>(nullptr);
}

inline bool VerifySizePrefixedGameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PacketTable::GameTable::Game>(nullptr);
}

inline void FinishGameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::GameTable::Game> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PacketTable::GameTable::Game> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GameTable
}  // namespace PacketTable

#endif  // FLATBUFFERS_GENERATED_GAME_PACKETTABLE_GAMETABLE_H_
