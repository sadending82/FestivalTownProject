// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.GameTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameEnd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GameEnd GetRootAsGameEnd(ByteBuffer _bb) { return GetRootAsGameEnd(_bb, new GameEnd()); }
  public static GameEnd GetRootAsGameEnd(ByteBuffer _bb, GameEnd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameEnd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte WinningteamsFlag { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<PacketTable.GameTable.GameEnd> CreateGameEnd(FlatBufferBuilder builder,
      byte winningteams_flag = 0) {
    builder.StartTable(1);
    GameEnd.AddWinningteamsFlag(builder, winningteams_flag);
    return GameEnd.EndGameEnd(builder);
  }

  public static void StartGameEnd(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWinningteamsFlag(FlatBufferBuilder builder, byte winningteamsFlag) { builder.AddByte(0, winningteamsFlag, 0); }
  public static Offset<PacketTable.GameTable.GameEnd> EndGameEnd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.GameTable.GameEnd>(o);
  }
}


static public class GameEndVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*WinningteamsFlag*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
