// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.UtilityTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HeartBeat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static HeartBeat GetRootAsHeartBeat(ByteBuffer _bb) { return GetRootAsHeartBeat(_bb, new HeartBeat()); }
  public static HeartBeat GetRootAsHeartBeat(ByteBuffer _bb, HeartBeat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HeartBeat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Sessionid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Time { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.UtilityTable.HeartBeat> CreateHeartBeat(FlatBufferBuilder builder,
      int sessionid = 0,
      int time = 0) {
    builder.StartTable(2);
    HeartBeat.AddTime(builder, time);
    HeartBeat.AddSessionid(builder, sessionid);
    return HeartBeat.EndHeartBeat(builder);
  }

  public static void StartHeartBeat(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSessionid(FlatBufferBuilder builder, int sessionid) { builder.AddInt(0, sessionid, 0); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(1, time, 0); }
  public static Offset<PacketTable.UtilityTable.HeartBeat> EndHeartBeat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.UtilityTable.HeartBeat>(o);
  }
}


static public class HeartBeatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Sessionid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Time*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
