// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.Player
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerAdd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PlayerAdd GetRootAsPlayerAdd(ByteBuffer _bb) { return GetRootAsPlayerAdd(_bb, new PlayerAdd()); }
  public static PlayerAdd GetRootAsPlayerAdd(ByteBuffer _bb, PlayerAdd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerAdd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PacketTable.Player.Vec3? Pos { get { int o = __p.__offset(6); return o != 0 ? (PacketTable.Player.Vec3?)(new PacketTable.Player.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public PacketTable.Player.Vec3? Direction { get { int o = __p.__offset(8); return o != 0 ? (PacketTable.Player.Vec3?)(new PacketTable.Player.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<PacketTable.Player.PlayerAdd> CreatePlayerAdd(FlatBufferBuilder builder,
      int key = 0,
      Offset<PacketTable.Player.Vec3> posOffset = default(Offset<PacketTable.Player.Vec3>),
      Offset<PacketTable.Player.Vec3> directionOffset = default(Offset<PacketTable.Player.Vec3>)) {
    builder.StartTable(3);
    PlayerAdd.AddDirection(builder, directionOffset);
    PlayerAdd.AddPos(builder, posOffset);
    PlayerAdd.AddKey(builder, key);
    return PlayerAdd.EndPlayerAdd(builder);
  }

  public static void StartPlayerAdd(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddKey(FlatBufferBuilder builder, int key) { builder.AddInt(0, key, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<PacketTable.Player.Vec3> posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static void AddDirection(FlatBufferBuilder builder, Offset<PacketTable.Player.Vec3> directionOffset) { builder.AddOffset(2, directionOffset.Value, 0); }
  public static Offset<PacketTable.Player.PlayerAdd> EndPlayerAdd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.Player.PlayerAdd>(o);
  }
}


static public class PlayerAddVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Key*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*Pos*/, PacketTable.Player.Vec3Verify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Direction*/, PacketTable.Player.Vec3Verify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
