// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.PassTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PassRewardRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PassRewardRequest GetRootAsPassRewardRequest(ByteBuffer _bb) { return GetRootAsPassRewardRequest(_bb, new PassRewardRequest()); }
  public static PassRewardRequest GetRootAsPassRewardRequest(ByteBuffer _bb, PassRewardRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PassRewardRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PassIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.PassTable.PassRewardRequest> CreatePassRewardRequest(FlatBufferBuilder builder,
      int pass_index = 0,
      int pass_type = 0,
      int pass_level = 0) {
    builder.StartTable(3);
    PassRewardRequest.AddPassLevel(builder, pass_level);
    PassRewardRequest.AddPassType(builder, pass_type);
    PassRewardRequest.AddPassIndex(builder, pass_index);
    return PassRewardRequest.EndPassRewardRequest(builder);
  }

  public static void StartPassRewardRequest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPassIndex(FlatBufferBuilder builder, int passIndex) { builder.AddInt(0, passIndex, 0); }
  public static void AddPassType(FlatBufferBuilder builder, int passType) { builder.AddInt(1, passType, 0); }
  public static void AddPassLevel(FlatBufferBuilder builder, int passLevel) { builder.AddInt(2, passLevel, 0); }
  public static Offset<PacketTable.PassTable.PassRewardRequest> EndPassRewardRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.PassTable.PassRewardRequest>(o);
  }
}


static public class PassRewardRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PassIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PassType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PassLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
