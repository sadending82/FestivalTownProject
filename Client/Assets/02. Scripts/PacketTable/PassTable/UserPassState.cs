// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.PassTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UserPassState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static UserPassState GetRootAsUserPassState(ByteBuffer _bb) { return GetRootAsUserPassState(_bb, new UserPassState()); }
  public static UserPassState GetRootAsUserPassState(ByteBuffer _bb, UserPassState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UserPassState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PassIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassExp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DailyMissionExp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PacketTable.PassTable.UserPassRewardState? PassRewardState(int j) { int o = __p.__offset(14); return o != 0 ? (PacketTable.PassTable.UserPassRewardState?)(new PacketTable.PassTable.UserPassRewardState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PassRewardStateLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PacketTable.PassTable.UserPassState> CreateUserPassState(FlatBufferBuilder builder,
      int pass_index = 0,
      int pass_type = 0,
      int pass_level = 0,
      int pass_exp = 0,
      int daily_mission_exp = 0,
      VectorOffset pass_reward_stateOffset = default(VectorOffset)) {
    builder.StartTable(6);
    UserPassState.AddPassRewardState(builder, pass_reward_stateOffset);
    UserPassState.AddDailyMissionExp(builder, daily_mission_exp);
    UserPassState.AddPassExp(builder, pass_exp);
    UserPassState.AddPassLevel(builder, pass_level);
    UserPassState.AddPassType(builder, pass_type);
    UserPassState.AddPassIndex(builder, pass_index);
    return UserPassState.EndUserPassState(builder);
  }

  public static void StartUserPassState(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPassIndex(FlatBufferBuilder builder, int passIndex) { builder.AddInt(0, passIndex, 0); }
  public static void AddPassType(FlatBufferBuilder builder, int passType) { builder.AddInt(1, passType, 0); }
  public static void AddPassLevel(FlatBufferBuilder builder, int passLevel) { builder.AddInt(2, passLevel, 0); }
  public static void AddPassExp(FlatBufferBuilder builder, int passExp) { builder.AddInt(3, passExp, 0); }
  public static void AddDailyMissionExp(FlatBufferBuilder builder, int dailyMissionExp) { builder.AddInt(4, dailyMissionExp, 0); }
  public static void AddPassRewardState(FlatBufferBuilder builder, VectorOffset passRewardStateOffset) { builder.AddOffset(5, passRewardStateOffset.Value, 0); }
  public static VectorOffset CreatePassRewardStateVector(FlatBufferBuilder builder, Offset<PacketTable.PassTable.UserPassRewardState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePassRewardStateVectorBlock(FlatBufferBuilder builder, Offset<PacketTable.PassTable.UserPassRewardState>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassRewardStateVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PacketTable.PassTable.UserPassRewardState>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassRewardStateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PacketTable.PassTable.UserPassRewardState>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPassRewardStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PacketTable.PassTable.UserPassState> EndUserPassState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.PassTable.UserPassState>(o);
  }
}


static public class UserPassStateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PassIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PassType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PassLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*PassExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DailyMissionExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*PassRewardState*/, PacketTable.PassTable.UserPassRewardStateVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
