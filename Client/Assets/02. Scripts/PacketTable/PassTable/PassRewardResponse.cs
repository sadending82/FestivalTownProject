// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.PassTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PassRewardResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PassRewardResponse GetRootAsPassRewardResponse(ByteBuffer _bb) { return GetRootAsPassRewardResponse(_bb, new PassRewardResponse()); }
  public static PassRewardResponse GetRootAsPassRewardResponse(ByteBuffer _bb, PassRewardResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PassRewardResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Result { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassLevel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItemIndex { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItemAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.PassTable.PassRewardResponse> CreatePassRewardResponse(FlatBufferBuilder builder,
      int result = 0,
      int pass_index = 0,
      int pass_type = 0,
      int pass_level = 0,
      int reward_item_index = 0,
      int reward_item_amount = 0) {
    builder.StartTable(6);
    PassRewardResponse.AddRewardItemAmount(builder, reward_item_amount);
    PassRewardResponse.AddRewardItemIndex(builder, reward_item_index);
    PassRewardResponse.AddPassLevel(builder, pass_level);
    PassRewardResponse.AddPassType(builder, pass_type);
    PassRewardResponse.AddPassIndex(builder, pass_index);
    PassRewardResponse.AddResult(builder, result);
    return PassRewardResponse.EndPassRewardResponse(builder);
  }

  public static void StartPassRewardResponse(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddResult(FlatBufferBuilder builder, int result) { builder.AddInt(0, result, 0); }
  public static void AddPassIndex(FlatBufferBuilder builder, int passIndex) { builder.AddInt(1, passIndex, 0); }
  public static void AddPassType(FlatBufferBuilder builder, int passType) { builder.AddInt(2, passType, 0); }
  public static void AddPassLevel(FlatBufferBuilder builder, int passLevel) { builder.AddInt(3, passLevel, 0); }
  public static void AddRewardItemIndex(FlatBufferBuilder builder, int rewardItemIndex) { builder.AddInt(4, rewardItemIndex, 0); }
  public static void AddRewardItemAmount(FlatBufferBuilder builder, int rewardItemAmount) { builder.AddInt(5, rewardItemAmount, 0); }
  public static Offset<PacketTable.PassTable.PassRewardResponse> EndPassRewardResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.PassTable.PassRewardResponse>(o);
  }
}


static public class PassRewardResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Result*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PassIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PassType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*PassLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RewardItemIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RewardItemAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
