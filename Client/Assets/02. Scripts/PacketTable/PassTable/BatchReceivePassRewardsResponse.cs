// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.PassTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BatchReceivePassRewardsResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static BatchReceivePassRewardsResponse GetRootAsBatchReceivePassRewardsResponse(ByteBuffer _bb) { return GetRootAsBatchReceivePassRewardsResponse(_bb, new BatchReceivePassRewardsResponse()); }
  public static BatchReceivePassRewardsResponse GetRootAsBatchReceivePassRewardsResponse(ByteBuffer _bb, BatchReceivePassRewardsResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BatchReceivePassRewardsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PassIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PacketTable.PassTable.PassRewardResponse? Rewards(int j) { int o = __p.__offset(6); return o != 0 ? (PacketTable.PassTable.PassRewardResponse?)(new PacketTable.PassTable.PassRewardResponse()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PacketTable.PassTable.BatchReceivePassRewardsResponse> CreateBatchReceivePassRewardsResponse(FlatBufferBuilder builder,
      int pass_index = 0,
      VectorOffset rewardsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    BatchReceivePassRewardsResponse.AddRewards(builder, rewardsOffset);
    BatchReceivePassRewardsResponse.AddPassIndex(builder, pass_index);
    return BatchReceivePassRewardsResponse.EndBatchReceivePassRewardsResponse(builder);
  }

  public static void StartBatchReceivePassRewardsResponse(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPassIndex(FlatBufferBuilder builder, int passIndex) { builder.AddInt(0, passIndex, 0); }
  public static void AddRewards(FlatBufferBuilder builder, VectorOffset rewardsOffset) { builder.AddOffset(1, rewardsOffset.Value, 0); }
  public static VectorOffset CreateRewardsVector(FlatBufferBuilder builder, Offset<PacketTable.PassTable.PassRewardResponse>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, Offset<PacketTable.PassTable.PassRewardResponse>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PacketTable.PassTable.PassRewardResponse>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PacketTable.PassTable.PassRewardResponse>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PacketTable.PassTable.BatchReceivePassRewardsResponse> EndBatchReceivePassRewardsResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.PassTable.BatchReceivePassRewardsResponse>(o);
  }
}


static public class BatchReceivePassRewardsResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PassIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Rewards*/, PacketTable.PassTable.PassRewardResponseVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
