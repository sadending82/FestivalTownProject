// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.PlayerTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerCalculatedDamage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PlayerCalculatedDamage GetRootAsPlayerCalculatedDamage(ByteBuffer _bb) { return GetRootAsPlayerCalculatedDamage(_bb, new PlayerCalculatedDamage()); }
  public static PlayerCalculatedDamage GetRootAsPlayerCalculatedDamage(ByteBuffer _bb, PlayerCalculatedDamage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerCalculatedDamage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TargetId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Hp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DamageAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Stamina { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public PacketTable.UtilitiesTable.Vec3f? KnockbackDirection { get { int o = __p.__offset(14); return o != 0 ? (PacketTable.UtilitiesTable.Vec3f?)(new PacketTable.UtilitiesTable.Vec3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<PacketTable.PlayerTable.PlayerCalculatedDamage> CreatePlayerCalculatedDamage(FlatBufferBuilder builder,
      int target_id = 0,
      int attack_type = 0,
      int hp = 0,
      int damage_amount = 0,
      int stamina = 0,
      Offset<PacketTable.UtilitiesTable.Vec3f> knockback_directionOffset = default(Offset<PacketTable.UtilitiesTable.Vec3f>)) {
    builder.StartTable(6);
    PlayerCalculatedDamage.AddKnockbackDirection(builder, knockback_directionOffset);
    PlayerCalculatedDamage.AddStamina(builder, stamina);
    PlayerCalculatedDamage.AddDamageAmount(builder, damage_amount);
    PlayerCalculatedDamage.AddHp(builder, hp);
    PlayerCalculatedDamage.AddAttackType(builder, attack_type);
    PlayerCalculatedDamage.AddTargetId(builder, target_id);
    return PlayerCalculatedDamage.EndPlayerCalculatedDamage(builder);
  }

  public static void StartPlayerCalculatedDamage(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTargetId(FlatBufferBuilder builder, int targetId) { builder.AddInt(0, targetId, 0); }
  public static void AddAttackType(FlatBufferBuilder builder, int attackType) { builder.AddInt(1, attackType, 0); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(2, hp, 0); }
  public static void AddDamageAmount(FlatBufferBuilder builder, int damageAmount) { builder.AddInt(3, damageAmount, 0); }
  public static void AddStamina(FlatBufferBuilder builder, int stamina) { builder.AddInt(4, stamina, 0); }
  public static void AddKnockbackDirection(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.Vec3f> knockbackDirectionOffset) { builder.AddOffset(5, knockbackDirectionOffset.Value, 0); }
  public static Offset<PacketTable.PlayerTable.PlayerCalculatedDamage> EndPlayerCalculatedDamage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.PlayerTable.PlayerCalculatedDamage>(o);
  }
}


static public class PlayerCalculatedDamageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TargetId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*AttackType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Hp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DamageAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Stamina*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 14 /*KnockbackDirection*/, PacketTable.UtilitiesTable.Vec3fVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
