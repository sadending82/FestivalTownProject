// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.ObjectTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BombSpawn : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static BombSpawn GetRootAsBombSpawn(ByteBuffer _bb) { return GetRootAsBombSpawn(_bb, new BombSpawn()); }
  public static BombSpawn GetRootAsBombSpawn(ByteBuffer _bb, BombSpawn obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BombSpawn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PacketTable.UtilitiesTable.Vec3f? Pos(int j) { int o = __p.__offset(4); return o != 0 ? (PacketTable.UtilitiesTable.Vec3f?)(new PacketTable.UtilitiesTable.Vec3f()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PosLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Id(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIdBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetIdArray() { return __p.__vector_as_array<int>(6); }
  public int ExplosionDelayTime(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExplosionDelayTimeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExplosionDelayTimeBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetExplosionDelayTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetExplosionDelayTimeArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<PacketTable.ObjectTable.BombSpawn> CreateBombSpawn(FlatBufferBuilder builder,
      VectorOffset posOffset = default(VectorOffset),
      VectorOffset idOffset = default(VectorOffset),
      VectorOffset explosion_delay_timeOffset = default(VectorOffset)) {
    builder.StartTable(3);
    BombSpawn.AddExplosionDelayTime(builder, explosion_delay_timeOffset);
    BombSpawn.AddId(builder, idOffset);
    BombSpawn.AddPos(builder, posOffset);
    return BombSpawn.EndBombSpawn(builder);
  }

  public static void StartBombSpawn(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPos(FlatBufferBuilder builder, VectorOffset posOffset) { builder.AddOffset(0, posOffset.Value, 0); }
  public static VectorOffset CreatePosVector(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.Vec3f>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, Offset<PacketTable.UtilitiesTable.Vec3f>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PacketTable.UtilitiesTable.Vec3f>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PacketTable.UtilitiesTable.Vec3f>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddId(FlatBufferBuilder builder, VectorOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static VectorOffset CreateIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExplosionDelayTime(FlatBufferBuilder builder, VectorOffset explosionDelayTimeOffset) { builder.AddOffset(2, explosionDelayTimeOffset.Value, 0); }
  public static VectorOffset CreateExplosionDelayTimeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExplosionDelayTimeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExplosionDelayTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExplosionDelayTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExplosionDelayTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PacketTable.ObjectTable.BombSpawn> EndBombSpawn(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.ObjectTable.BombSpawn>(o);
  }
}


static public class BombSpawnVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Pos*/, PacketTable.UtilitiesTable.Vec3fVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Id*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*ExplosionDelayTime*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
