// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.LobbyTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameMatchingResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GameMatchingResponse GetRootAsGameMatchingResponse(ByteBuffer _bb) { return GetRootAsGameMatchingResponse(_bb, new GameMatchingResponse()); }
  public static GameMatchingResponse GetRootAsGameMatchingResponse(ByteBuffer _bb, GameMatchingResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameMatchingResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Ingameid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Roomid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Team { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Gamemode { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapCode { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GameTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsHost { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int TotalPlayerCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.LobbyTable.GameMatchingResponse> CreateGameMatchingResponse(FlatBufferBuilder builder,
      int ingameid = 0,
      int roomid = 0,
      int team = 0,
      int gamemode = 0,
      int map_code = 0,
      int game_time = 0,
      bool is_host = false,
      int total_player_count = 0) {
    builder.StartTable(8);
    GameMatchingResponse.AddTotalPlayerCount(builder, total_player_count);
    GameMatchingResponse.AddGameTime(builder, game_time);
    GameMatchingResponse.AddMapCode(builder, map_code);
    GameMatchingResponse.AddGamemode(builder, gamemode);
    GameMatchingResponse.AddTeam(builder, team);
    GameMatchingResponse.AddRoomid(builder, roomid);
    GameMatchingResponse.AddIngameid(builder, ingameid);
    GameMatchingResponse.AddIsHost(builder, is_host);
    return GameMatchingResponse.EndGameMatchingResponse(builder);
  }

  public static void StartGameMatchingResponse(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddIngameid(FlatBufferBuilder builder, int ingameid) { builder.AddInt(0, ingameid, 0); }
  public static void AddRoomid(FlatBufferBuilder builder, int roomid) { builder.AddInt(1, roomid, 0); }
  public static void AddTeam(FlatBufferBuilder builder, int team) { builder.AddInt(2, team, 0); }
  public static void AddGamemode(FlatBufferBuilder builder, int gamemode) { builder.AddInt(3, gamemode, 0); }
  public static void AddMapCode(FlatBufferBuilder builder, int mapCode) { builder.AddInt(4, mapCode, 0); }
  public static void AddGameTime(FlatBufferBuilder builder, int gameTime) { builder.AddInt(5, gameTime, 0); }
  public static void AddIsHost(FlatBufferBuilder builder, bool isHost) { builder.AddBool(6, isHost, false); }
  public static void AddTotalPlayerCount(FlatBufferBuilder builder, int totalPlayerCount) { builder.AddInt(7, totalPlayerCount, 0); }
  public static Offset<PacketTable.LobbyTable.GameMatchingResponse> EndGameMatchingResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.LobbyTable.GameMatchingResponse>(o);
  }
}


static public class GameMatchingResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Ingameid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Roomid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Team*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Gamemode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MapCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*GameTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*IsHost*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*TotalPlayerCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
