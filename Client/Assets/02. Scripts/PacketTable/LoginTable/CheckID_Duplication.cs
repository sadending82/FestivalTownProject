// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PacketTable.LoginTable
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CheckID_Duplication : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CheckID_Duplication GetRootAsCheckID_Duplication(ByteBuffer _bb) { return GetRootAsCheckID_Duplication(_bb, new CheckID_Duplication()); }
  public static CheckID_Duplication GetRootAsCheckID_Duplication(ByteBuffer _bb, CheckID_Duplication obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CheckID_Duplication __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public int Result { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PacketTable.LoginTable.CheckID_Duplication> CreateCheckID_Duplication(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      int result = 0) {
    builder.StartTable(2);
    CheckID_Duplication.AddResult(builder, result);
    CheckID_Duplication.AddId(builder, idOffset);
    return CheckID_Duplication.EndCheckID_Duplication(builder);
  }

  public static void StartCheckID_Duplication(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddResult(FlatBufferBuilder builder, int result) { builder.AddInt(1, result, 0); }
  public static Offset<PacketTable.LoginTable.CheckID_Duplication> EndCheckID_Duplication(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PacketTable.LoginTable.CheckID_Duplication>(o);
  }
}


static public class CheckID_DuplicationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyField(tablePos, 6 /*Result*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
